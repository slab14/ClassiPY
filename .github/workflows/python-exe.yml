#This workflow will install Python dependencies (including ImageMagic), then create an executable of the python script

name: Build exe

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          (new-object System.Net.WebClient).DownloadFile('https://imagemagick.org/archive/binaries/ImageMagick-7.1.1-27-portable-Q8-x64.zip', 'C:\ImageMagick-7.1.1-27-portable-Q8-x64.zip')
          unzip C:\ImageMagick-7.1.1-27-portable-Q8-x64.zip
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install PyInstaller
      - name: Run PyInstaller
        run: |
          python -m PyInstaller --onefile --noconsole --name "classiPY" ${{ github.workspace }}/src/classiPY.py
      - uses: actions/upload-artifact@v3
        with:
          name: classiPY
          path: dist/classiPY.exe
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          echo "SHA=$("${{ github.sha }}".SubString(0, 8))" >> $env:GITHUB_ENV
          tag_name: ${{ env.SHA }}
          release_name: Release ${{ env.SHA }}
          body: |
            Test Release v0.0.1
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.output.upload_url }}
          asset_path: dist/classiPY.exe
          asset_name: classiPY.exe
          asset_content_type: application/zip